#TIMEHORIZON
T=43800;

#GLOBAL
wacc = 0.07;
number_years_horizon = T/8760;
conversion_factor_hydrogen = 0;
conversion_factor_carbon_dioxide = 0;
conversion_factor_water = 0;
facteur = 0;

#NODE SOLAR_PV_PLANTS
#PARAMETERS
full_capex = 380.0;
lifetime = 25.0;
annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
fom = 7.25; // MEur/year
vom = 0.0;
capacity_factor_PV = import "data/pv_factors.csv"; // Dimensionless
max_capacity = 500.0; // GW
#VARIABLES
internal: capacity;
external: electricity[T];
#CONSTRAINTS
electricity[t] <= capacity_factor_PV[t] * capacity;
capacity <= max_capacity;
capacity >= 0;
electricity[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex + fom) * capacity;
min: vom * electricity[t];

#NODE WIND_PLANTS
#PARAMETERS
full_capex = 1040.0;
lifetime = 30.0;
annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
fom = 12.6; // MEur/year
vom = 0.00135; // MEur/GWh
capacity_factor_wind = import "data/wind_factors.csv"; // Dimensionless
max_capacity = 500.0; // GW
#VARIABLES
internal: capacity;
external: electricity[T];
#CONSTRAINTS
electricity[t] <= capacity_factor_wind[t] * capacity;
capacity <= max_capacity;
capacity >= 0;
electricity[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex + fom) * capacity;
min: vom * electricity[t];

#NODE BATTERY_STORAGE
#PARAMETERS
full_capex_stock = 142.0;
full_capex_flow = 160.0;
lifetime_stock = 10.0;
lifetime_flow = 10.0;
annualised_capex_stock = full_capex_stock * global.wacc * (1 + global.wacc)**lifetime_stock / ((1 + global.wacc)**lifetime_stock - 1); // MEur
annualised_capex_flow = full_capex_flow * global.wacc * (1 + global.wacc)**lifetime_flow / ((1 + global.wacc)**lifetime_flow - 1); // MEur
fom_stock = 0.0;
fom_flow = 0.5;
vom_stock = 0.0018;
vom_flow = 0.0;
charge_discharge_ratio = 1.0;
self_discharge = 0.00004;
efficiency_in = 0.959;
efficiency_out = 0.959;
#VARIABLES
internal: capacity_flow;
internal: capacity_stock;
internal: electricity_stored[T];
external: electricity_in[T];
external: electricity_out[T];
#CONSTRAINTS
electricity_in[t] <= capacity_flow;
electricity_out[t] <= charge_discharge_ratio * capacity_flow;
electricity_stored[t] <= capacity_stock;
electricity_stored[0] == electricity_stored[T-1];
electricity_stored[t+1] == (1 - self_discharge) * electricity_stored[t] + efficiency_in * electricity_in[t] - electricity_out[t] / efficiency_out;
capacity_flow >= 0;
capacity_stock >= 0;
electricity_stored[t] >= 0;
electricity_in[t] >= 0;
electricity_out[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex_stock + fom_stock) * capacity_stock + global.number_years_horizon * (annualised_capex_flow + fom_flow) * capacity_flow;
min: vom_stock * electricity_stored[t] + vom_flow * electricity_in[t];

#NODE HVDC
#PARAMETERS
full_capex_lines = 0.25*50;
full_capex_stations = 2*115.0;
lifetime_lines = 40.0;
lifetime_stations = 40.0;
annualised_capex_lines = full_capex_lines * global.wacc * (1 + global.wacc)**lifetime_lines / ((1 + global.wacc)**lifetime_lines - 1); // MEur
annualised_capex_stations = full_capex_stations * global.wacc * (1 + global.wacc)**lifetime_stations / ((1 + global.wacc)**lifetime_stations - 1); // MEur
annualised_capex = annualised_capex_lines + annualised_capex_stations; // MEur/GW-year (Lines + Stations)
fom = 2.5 + 4.6; // MEur/year
vom = 0.0;
efficiency_HVDC = 0.9499;
#VARIABLES
internal: capacity;
external: electricity_in[T];
external: electricity_out[T];
#CONSTRAINTS
electricity_in[t] <= capacity;
electricity_out[t] == efficiency_HVDC * electricity_in[t];
capacity >= 0;
electricity_in[t] >= 0;
electricity_out[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex + fom) * capacity;
min: vom * electricity_in[t];

#NODE ELECTROLYSIS_PLANTS
#PARAMETERS
full_capex = 600.0;
lifetime = 15.0;
annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
fom = 30.0; // MEur/year
vom = 0.0;
conversion_factor_electricity = 50.6;
conversion_factor_water = 9.0;
minimum_level = 0.05;
#VARIABLES
internal: capacity; // GW - reference flow for sizing is electricity
external: electricity[T]; // GWh/h
external: water[T]; // kt/h
external: hydrogen[T]; // kt/h
#CONSTRAINTS
electricity[t] <= capacity;
minimum_level * capacity <= electricity[t];
electricity[t] == conversion_factor_electricity * hydrogen[t];
water[t] == conversion_factor_water * hydrogen[t];
capacity >= 0;
electricity[t] >= 0;
hydrogen[t] >= 0;
water[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex + fom) * capacity;
min: vom * electricity[t];

#NODE DESALINATION_PLANTS
#PARAMETERS
full_capex = 28.08;
lifetime = 20.0;
annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
fom = 0.0; // MEur/year
vom = 0.000315;
conversion_factor_electricity = 0.002;
minimum_level = 1.0;
ramp_rate_up = 0.0;
ramp_rate_down = 0.0;
#VARIABLES
internal: capacity; // kt/h - freshwater is the reference flow for sizing
external: electricity[T];
external: water[T];
#CONSTRAINTS
water[t] <= capacity;
minimum_level * capacity <= water[t];
electricity[t] == conversion_factor_electricity * water[t];
water[t] <= water[t-1] + ramp_rate_up * capacity;
water[t-1] <= water[t] + ramp_rate_down * capacity;
capacity >= 0;
electricity[t] >= 0;
water[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex + fom) * capacity;
min: vom * water[t];



#NODE DIRECT_AIR_CAPTURE_PLANTS // 2030
    #PARAMETERS
        full_capex = 6000;
        lifetime = 20.0;
        annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
        fom = 300; // MEur/kt
        vom = 0.0; // MEur/kt
        conversion_factor_electricity = 0.15; // Gwh/kt(co2)
        conversion_factor_water = 5.0;
        heat_consumption = 1.46; // GWh/kt(co2)
        LHV_hydrogen = 33.3; // Gwh/kt(h2)
        minimum_level = 1.0;
        ramp_rate_up = 0.0;
        ramp_rate_down = 0.0;
        heat_recovery_factor = 0.2; // GWh/kt(co2)
    #VARIABLES
        internal: capacity; // kt/h - carbon dioxide is the reference flow for sizing
        external: elec_in[T];
        external: water_in[T];
        external: hydrogen_in[T];
        external: co2_out[T];
        external: heat_in[T]; // GWh from methanation
    #CONSTRAINTS
        co2_out[t] <= capacity;
        minimum_level * capacity <= co2_out[t];
        elec_in[t] == conversion_factor_electricity * co2_out[t];
        water_in[t] == conversion_factor_water * co2_out[t];
        hydrogen_in[t] * LHV_hydrogen + heat_in[t] + heat_recovery_factor * co2_out[t-1]  == heat_consumption * co2_out[t];
        co2_out[t] <= co2_out[t-1] + ramp_rate_up * capacity;
        co2_out[t-1] <= co2_out[t] + ramp_rate_down * capacity;
        capacity >= 0;
        elec_in[t] >= 0;
        water_in[t] >= 0;
        hydrogen_in[t] >= 0;
        co2_out[t] >= 0;
        heat_in[t] >= 0;
    #OBJECTIVES
        min: global.number_years_horizon * (annualised_capex + fom) * capacity;
        min: vom * co2_out[t];


#NODE HYDROGEN_STORAGE
#PARAMETERS
full_capex_stock = 45.0;
full_capex_flow = 0.0;
lifetime_stock = 30.0;
lifetime_flow = 30.0;
annualised_capex_stock = full_capex_stock * global.wacc * (1 + global.wacc)**lifetime_stock / ((1 + global.wacc)**lifetime_stock - 1); // MEur
annualised_capex_flow = full_capex_flow * global.wacc * (1 + global.wacc)**lifetime_flow / ((1 + global.wacc)**lifetime_flow - 1); // MEur
fom_stock = 2.25;
fom_flow = 0.0;
vom_stock = 0.0;
vom_flow = 0.0;
conversion_factor_electricity = 1.3;
minimum_level = 0.05;
#VARIABLES
internal: capacity_flow;
internal: capacity_stock;
internal: hydrogen_stored[T];
external: electricity[T];
external: hydrogen_in[T];
external: hydrogen_out[T];
#CONSTRAINTS
hydrogen_in[t] <= capacity_flow;
hydrogen_out[t] <= capacity_flow;
minimum_level * capacity_stock <= hydrogen_stored[t];
hydrogen_stored[t] <= capacity_stock;
hydrogen_stored[0] == hydrogen_stored[T-1];
hydrogen_stored[t+1] == hydrogen_stored[t] + hydrogen_in[t] - hydrogen_out[t];
electricity[t] == conversion_factor_electricity * hydrogen_in[t];
capacity_flow >= 0;
capacity_stock >= 0;
hydrogen_stored[t] >= 0;
hydrogen_in[t] >= 0;
hydrogen_out[t] >= 0;
electricity[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex_stock + fom_stock) * capacity_stock + global.number_years_horizon * (annualised_capex_flow + fom_flow) * capacity_flow;
min: vom_stock * hydrogen_stored[t] + vom_flow * hydrogen_in[t];

#NODE CARBON_DIOXIDE_STORAGE
#PARAMETERS
full_capex_stock = 1.35;
full_capex_flow = 32.4+16.2;
lifetime_stock = 30.0;
lifetime_flow = 30.0;
annualised_capex_stock = full_capex_stock * global.wacc * (1 + global.wacc)**lifetime_stock / ((1 + global.wacc)**lifetime_stock - 1); // MEur
annualised_capex_flow = full_capex_flow * global.wacc * (1 + global.wacc)**lifetime_flow / ((1 + global.wacc)**lifetime_flow - 1); // MEur
fom_stock = 0.0675;
fom_flow = 1.62 + 0.81; // MEur/(kt/h)-year (carbon dioxide liquefaction + regasification)
vom_stock = 0.0;
vom_flow = 0.0;
conversion_factor_electricity = 0.105;
#VARIABLES
internal: capacity_flow;
internal: capacity_stock;
internal: carbon_dioxide_stored[T];
external: electricity[T];
external: carbon_dioxide_in[T];
external: carbon_dioxide_out[T];
#CONSTRAINTS
carbon_dioxide_in[t] <= capacity_flow;
carbon_dioxide_out[t] <= capacity_flow;
carbon_dioxide_stored[t] <= capacity_stock;
carbon_dioxide_stored[0] == carbon_dioxide_stored[T-1];
carbon_dioxide_stored[t+1] == carbon_dioxide_stored[t] + carbon_dioxide_in[t] - carbon_dioxide_out[t];
electricity[t] == conversion_factor_electricity * carbon_dioxide_in[t];
capacity_flow >= 0;
capacity_stock >= 0;
carbon_dioxide_stored[t] >= 0;
carbon_dioxide_in[t] >= 0;
carbon_dioxide_out[t] >= 0;
electricity[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex_stock + fom_stock) * capacity_stock + global.number_years_horizon * (annualised_capex_flow + fom_flow) * capacity_flow;
min: vom_stock * carbon_dioxide_stored[t] + vom_flow * carbon_dioxide_in[t];

#NODE WATER_STORAGE
#PARAMETERS
full_capex_stock = 0.065;
full_capex_flow = 1.55923;
lifetime_stock = 30.0;
lifetime_flow = 30.0;
annualised_capex_stock = full_capex_stock * global.wacc * (1 + global.wacc)**lifetime_stock / ((1 + global.wacc)**lifetime_stock - 1); // MEur
annualised_capex_flow = full_capex_flow * global.wacc * (1 + global.wacc)**lifetime_flow / ((1 + global.wacc)**lifetime_flow - 1); // MEur
fom_stock = 0.0013;
fom_flow = 0.0312;
vom_stock = 0.0;
vom_flow = 0.0;
conversion_factor_electricity = 0.00036;
#VARIABLES
internal: capacity_flow;
internal: capacity_stock;
internal: water_stored[T];
external: electricity[T];
external: water_in[T];
external: water_out[T];
#CONSTRAINTS
water_in[t] <= capacity_flow;
water_out[t] <= capacity_flow;
water_stored[t] <= capacity_stock;
water_stored[0] == water_stored[T-1];
water_stored[t+1] == water_stored[t] + water_in[t] - water_out[t];
electricity[t] == conversion_factor_electricity * water_in[t];
capacity_flow >= 0;
capacity_stock >= 0;
water_stored[t] >= 0;
water_in[t] >= 0;
water_out[t] >= 0;
electricity[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex_stock + fom_stock) * capacity_stock + global.number_years_horizon * (annualised_capex_flow + fom_flow) * capacity_flow;
min: vom_stock * water_stored[t] + vom_flow * water_in[t];


#NODE FT_PROCESS
#PARAMETERS
HHV_PETROLE = 12.2; //  GWh/kt
full_capex = 1017 * HHV_PETROLE * global.facteur; // to obtain cost in MEur/(kt/h)
lifetime = 25.0;
annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
fom = 6.1 * HHV_PETROLE * global.facteur; // MEur/year
vom = 0;
conversion_factor_heat = 0.06; // GW (heat)/ GW (methane)
minimum_level = 1.0;
ramp_rate_up = 0.0;
ramp_rate_down = 0.0;
#VARIABLES
internal: capacity; // kt/h - reference flow for sizing is methane
external: hydrogen[T];
external: carbon_dioxide[T];
external: petrol[T];
external: water[T];
external: heat_out[T]; // Gwh/h
#CONSTRAINTS
petrol[t] <= capacity;
minimum_level * capacity <= petrol[t];
hydrogen[t] == global.conversion_factor_hydrogen * global.facteur * petrol[t];
carbon_dioxide[t] == global.conversion_factor_carbon_dioxide * global.facteur * petrol[t];
heat_out[t] == conversion_factor_heat * HHV_PETROLE * petrol[t];
water[t] == global.conversion_factor_water * petrol[t];
petrol[t] <= petrol[t-1] + ramp_rate_up * capacity;
petrol[t-1] <= petrol[t] + ramp_rate_down * capacity;
capacity >= 0;
petrol[t] >= 0;
hydrogen[t] >= 0;
carbon_dioxide[t] >= 0;
water[t] >= 0;
heat_out[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex + fom) * capacity;
min: vom * petrol[t];


#NODE PETROL_STORAGE_HUB
#PARAMETERS
full_capex_stock = 0;
full_capex_flow = 0;
lifetime_stock = 30.0;
lifetime_flow = 30.0;
annualised_capex_stock = full_capex_stock * global.wacc * (1 + global.wacc)**lifetime_stock / ((1 + global.wacc)**lifetime_stock - 1); // MEur
annualised_capex_flow = full_capex_flow * global.wacc * (1 + global.wacc)**lifetime_flow / ((1 + global.wacc)**lifetime_flow - 1); // MEur
fom_stock = 0.05282;
fom_flow = 0.0;
vom_stock = 0.0;
vom_flow = 0.0;
#VARIABLES
internal: capacity_flow;
internal: capacity_stock;
internal: petrol_stored[T];
external: petrol_in[T];
external: petrol_out[T];
#CONSTRAINTS
petrol_in[t] <= capacity_flow;
petrol_out[t] <= capacity_flow;
petrol_stored[t] <= capacity_stock;
petrol_stored[0] == petrol_stored[T-1];
petrol_stored[t+1] == petrol_stored[t] + petrol_in[t] - petrol_out[t];
capacity_flow >= 0;
capacity_stock >= 0;
petrol_stored[t] >= 0;
petrol_in[t] >= 0;
petrol_out[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex_stock + fom_stock) * capacity_stock + global.number_years_horizon * (annualised_capex_flow + fom_flow) * capacity_flow;
min: vom_stock * petrol_stored[t] + vom_flow * petrol_in[t];

#NODE PETROL_CARRIERS
#PARAMETERS
number_carriers = 7;
full_capex = 2.537;
lifetime = 30.0;
annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
fom = 0.12685; // MEur/year
vom = 0.0;
schedule = import "data/carrier_schedule.csv";
loading_time = 24;
travel_time = 116;
loss_rate = 0.00005208;
conversion_factor = 1 - (loss_rate * travel_time);
#VARIABLES
internal: capacity;
external: petrol_in[T];
external: petrol_out[T];
#CONSTRAINTS
petrol_in[t] <= schedule[t] * capacity;
petrol_out[t+travel_time] == conversion_factor * petrol_in[t];
petrol_out[t] == 0 where t < travel_time;
capacity >= 0;
petrol_in[t] >= 0;
petrol_out[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex + fom) * capacity * loading_time * number_carriers;
min: vom * petrol_in[t];

#NODE PETROL_STORAGE_DESTINATION
#PARAMETERS
full_capex_stock = 0;
full_capex_flow = 0;
lifetime_stock = 30.0;
lifetime_flow = 30.0;
annualised_capex_stock = full_capex_stock * global.wacc * (1 + global.wacc)**lifetime_stock / ((1 + global.wacc)**lifetime_stock - 1); // MEur
annualised_capex_flow = full_capex_flow * global.wacc * (1 + global.wacc)**lifetime_flow / ((1 + global.wacc)**lifetime_flow - 1); // MEur
fom_stock = 0.05282;
fom_flow = 0.0;
vom_stock = 0.0;
vom_flow = 0.0;
#VARIABLES
internal: capacity_flow;
internal: capacity_stock;
internal: petrol_stored[T];
external: petrol_in[T];
external: petrol_out[T];
#CONSTRAINTS
petrol_in[t] <= capacity_flow;
petrol_out[t] <= capacity_flow;
petrol_stored[t] <= capacity_stock;
petrol_stored[0] == petrol_stored[T-1];
petrol_stored[t+1] == petrol_stored[t] + petrol_in[t] - petrol_out[t];
capacity_flow >= 0;
capacity_stock >= 0;
petrol_stored[t] >= 0;
petrol_in[t] >= 0;
petrol_out[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex_stock + fom_stock) * capacity_stock + global.number_years_horizon * (annualised_capex_flow + fom_flow) * capacity_flow;
min: vom_stock * petrol_stored[t] + vom_flow * petrol_in[t];

#NODE REFINERY
#PARAMETERS
full_capex = 0;
lifetime = 30.0;
annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
fom = 24.97; // MEur/year
vom = 0.0;
conversion_factor = 1;
#VARIABLES
internal: capacity;
external: petrol[T];
external: refined_petrol[T];
#CONSTRAINTS
petrol[t] <= capacity;
refined_petrol[t] == conversion_factor * petrol[t];
capacity >= 0;
refined_petrol[t] >= 0;
petrol[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex + fom) * capacity;
min: vom * petrol[t];

#HYPEREDGE INLAND_POWER_BALANCE
#CONSTRAINTS
SOLAR_PV_PLANTS.electricity[t] + WIND_PLANTS.electricity[t] + BATTERY_STORAGE.electricity_out[t] == BATTERY_STORAGE.electricity_in[t] + HVDC.electricity_in[t];

#HYPEREDGE COASTAL_POWER_BALANCE
#CONSTRAINTS
HVDC.electricity_out[t] == ELECTROLYSIS_PLANTS.electricity[t] + HYDROGEN_STORAGE.electricity[t] + DESALINATION_PLANTS.electricity[t] + WATER_STORAGE.electricity[t] + DIRECT_AIR_CAPTURE_PLANTS.elec_in[t] + CARBON_DIOXIDE_STORAGE.electricity[t];
#HYPEREDGE COASTAL_HYDROGEN_BALANCE
#CONSTRAINTS
ELECTROLYSIS_PLANTS.hydrogen[t] + HYDROGEN_STORAGE.hydrogen_out[t] == HYDROGEN_STORAGE.hydrogen_in[t] + DIRECT_AIR_CAPTURE_PLANTS.hydrogen_in[t] + FT_PROCESS.hydrogen[t];

#HYPEREDGE COASTAL_WATER_BALANCE
#CONSTRAINTS
DESALINATION_PLANTS.water[t] + FT_PROCESS.water[t] + WATER_STORAGE.water_out[t] == WATER_STORAGE.water_in[t] + ELECTROLYSIS_PLANTS.water[t] + DIRECT_AIR_CAPTURE_PLANTS.water_in[t];

#HYPEREDGE COASTAL_CARBON_DIOXIDE_BALANCE
#CONSTRAINTS
DIRECT_AIR_CAPTURE_PLANTS.co2_out[t] + CARBON_DIOXIDE_STORAGE.carbon_dioxide_out[t] == CARBON_DIOXIDE_STORAGE.carbon_dioxide_in[t] + FT_PROCESS.carbon_dioxide[t];


#HYPEREDGE COASTAL_HEAT_BALANCE
#CONSTRAINTS
FT_PROCESS.heat_out[t] >= DIRECT_AIR_CAPTURE_PLANTS.heat_in[t];


#HYPEREDGE COASTAL_PETROL_BALANCE
#CONSTRAINTS
FT_PROCESS.petrol[t] + PETROL_STORAGE_HUB.petrol_out[t] == PETROL_STORAGE_HUB.petrol_in[t] + PETROL_CARRIERS.petrol_in[t];

#HYPEREDGE DESTINATION_PETROL_BALANCE
#CONSTRAINTS
PETROL_CARRIERS.petrol_out[t] + PETROL_STORAGE_DESTINATION.petrol_out[t] == PETROL_STORAGE_DESTINATION.petrol_in[t] + REFINERY.petrol[t];

#HYPEREDGE DESTINATION_DEMAND_BALANCE
#PARAMETERS
demand = import "data/petrol_demand.csv";
#CONSTRAINTS
REFINERY.refined_petrol[t] == demand[t];
